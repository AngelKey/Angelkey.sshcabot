#!/bin/python3

"""
This script walks the user through creating and configuring two accounts in order to run the integration tests.

Usage: ./configure_accounts.py
"""

import os
import random
import select
import string
import subprocess
import time

USERNAME_PREFIX = "dworken"

def secure_random_str(len):
    return ''.join([random.SystemRandom().choice(string.ascii_lowercase) for _ in range(len)])

def start_service():
    """
    Start a new keybase service process in a randomly generated home directory and return the home directory
    :return: str: The home directory to be used with future invocations of keybase commands
    """
    home_dir = f"/tmp/keybase-{secure_random_str(10)}"
    os.system(f"keybase --home {home_dir} service &")
    time.sleep(1)
    return home_dir

class User:
    def __init__(self, username, paperkey):
        self.username = username
        self.paperkey = paperkey
        self.home_dir = start_service()
        self._oneshot_login()

    def _run_command(self, *args):
        return subprocess.check_output(["keybase", "--home", self.home_dir, *args])

    def _oneshot_login(self):
        output = self._run_command("oneshot", "--paperkey", self.paperkey, "--username", self.username)
        assert output == b"", "Failed to login via keybase oneshot"
        assert (b"Username:      " + self.username.encode('utf-8')) in self._run_command("status"), "Failed to verify login via keybase oneshot"

    def create_team(self, team):
        """
        Create a team. Team can be a subteam but the parent teams must exist
        :param team:    A team name. Eg "foo", "foo.bar"
        :return:        None
        """
        assert b"Success!" in self._run_command("team", "create", "-j", team)

    def invite_to_team(self, team, username):
        """
        Invite the given user to the given team
        :param team:        The name of the team. Can be a subteam
        :param username:    The username of the user to be invited
        :return:            None
        """
        assert b"Success!" in self._run_command("team", "add-member", team, "--user=%s" % username, "--role=admin")

    def create_team_and_invite(self, team, username):
        """
        Create a team and invite the given user to it as an admin. Team can be a subteam but the parent teams must exist
        :param team:    A team name. Eg "foo", "foo.bar"
        :param username The name of the user to invite to the team
        :return:        None
        """
        self.create_team(team)
        self.invite_to_team(team, username)

    def create_channel(self, team, channel):
        """
        Create a channel in the given team
        :param team:        The name of the team that the channel will reside in
        :param channel:     The name of the channel (without any '#')
        :return:            None
        """
        assert b"Success!" in self._run_command("chat", "create-channel", team, channel, "--topic-type", "chat")

    def join_channel(self, team, channel):
        """
        Join the specified channel in the specified team
        :param team:        The name of the team that the channel is in
        :param channel:     The name of the channel (without any '#')
        :return:            None
        """
        assert b"" == self._run_command("chat", "join-channel", team, channel, "--topic-type", "chat")

def write_env_files(kssh_user, ca_user, parent_team):
    with open("tests/env.sh", "w+") as f:
        f.write("#!/bin/bash\n"
                "# File automatically generated by configure_accounts.py"
                f"export BOT_USERNAME='{ca_user.username}'\n"
                f"export BOT_PAPERKEY='{ca_user.paperkey}'\n"
                f"export KSSH_USERNAME='{kssh_user.username}'\n"
                f"export KSSH_PAPERKEY='{kssh_user.paperkey}'\n"
                f"export SUBTEAM='{parent_team}'\n"
                f"export SUBTEAM_SECONDARY='{parent_team}.secondary'\n")

def make_user(purpose):
    """
    Prompts the user via stdout and stderr in order to either create a new user or use an existing user
    :return: A User object
    """
    answer = input("Would you like to create a new user to use for %s? [y/n] " % purpose).lower()
    if answer not in ["y", "n"]:
        print("Invalid answer %s" % repr(answer))
        return make_user(purpose)
    if answer == "y":
        # Guide them through making a new user
        print("Follow the prompts in order to create a new account...")
        home_dir = start_service()
        os.system("keybase --home %s signup --no-email" % home_dir)
        username = input("What is the username: ")
        os.system("keybase --home %s paperkey" % home_dir)
        paperkey = input("What is the paper key: ")
        return User(username, paperkey)
    else:
        # Prompt them for the username and password
        username = input("What is the username: ")
        paperkey = input("What is the paper key: ")
        return User(username, paperkey)

if __name__ == '__main__':
    ca_user = make_user("the CA bot")
    kssh_user = make_user("the kssh tester")

    parent_team = secure_random_str(16)
    ca_user.create_team_and_invite(parent_team, kssh_user.username)

    ca_user.create_team_and_invite(parent_team + ".ssh", kssh_user.username)
    ca_user.create_channel(parent_team + ".ssh", "ssh-provision")
    kssh_user.join_channel(parent_team + ".ssh", "ssh-provision")
    ca_user.create_team_and_invite(parent_team + ".ssh.staging", kssh_user.username)
    ca_user.create_team(parent_team + ".ssh.prod")
    ca_user.create_team_and_invite(parent_team + ".ssh.root_everywhere", kssh_user.username)

    ca_user.create_team_and_invite(parent_team + ".secondary", kssh_user.username)

    write_env_files(kssh_user, ca_user, parent_team)