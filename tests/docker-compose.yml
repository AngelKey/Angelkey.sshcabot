version: '3'
services:
  # TODO
  ca-bot:
    image: ca-bot
    container_name: ca-bot
    build:
      context: ..
      dockerfile: "tests/Dockerfile-cabot"
    environment:
      - BOT_PAPERKEY
      - BOT_USERNAME
      - SUBTEAM
      - TESTER_USERNAME
    volumes:
      - app-volume:/shared/
    user: root
    command: "sh -c 'chown -R keybase:keybase /shared && su keybase -c \"bash tests/bot-entrypoint.sh\"'"
    ports:
      - 8080  # Used for the flask webserver that manages restarting keybaseca with different config options
    depends_on:
      - sshd-prod
      - sshd-staging
  # TODO
  kssh:
    image: kssh
    container_name: kssh
    build:
      context: ../
      dockerfile: "tests/Dockerfile-kssh"
    environment:
      - KSSH_PAPERKEY
      - KSSH_USERNAME
      - BOT_USERNAME
      - SUBTEAM
      - SUBTEAM_SECONDARY
    volumes:
      - app-volume:/shared/
    user: keybase
    command: "bash tests/tester-entrypoint.sh"
    depends_on:
      - sshd-staging
      - sshd-prod
      - ca-bot
      - autoapprover
  # An ssh server that will accept signed requests with the principal "staging"
  sshd-staging:
    image: sshd-staging
    container_name: sshd-staging
    build:
      context: .
      dockerfile: "Dockerfile-sshd"
      args:
        user_principal: ${SUBTEAM}.ssh.staging
        root_principal: ${SUBTEAM}.ssh.root_everywhere
    volumes:
      - app-volume:/shared/
  # An ssh server that will accept signed requests with the principal "prod"
  sshd-prod:
    image: sshd-prod
    container_name: sshd-prod
    build:
      context: .
      dockerfile: "Dockerfile-sshd"
      args:
        user_principal: ${SUBTEAM}.ssh.prod
        root_principal: ${SUBTEAM}.ssh.root_everywhere
    volumes:
      - app-volume:/shared/
  # TODO
  autoapprover:
    image: autoapprover
    container_name: autoapprover
    build:
      context: ./
      dockerfile: "Dockerfile-autoapprover"
    environment:
      - TESTER_USERNAME
      - TESTER_PAPERKEY
    ports:
      - 8080
    command: "python3.7 autoapprover.py"
volumes:
  app-volume:
